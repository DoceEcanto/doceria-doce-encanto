// ----- SCROLL SUAVE PARA LINKS INTERNOS -----
// Seleciona todos os links que come칞am com '#' (links internos/칙ncoras)
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        // Previne o comportamento padr칚o do link (que seria ir para o ID sem anima칞칚o)
        e.preventDefault();

        // Obt칠m o ID do elemento de destino do atributo href do link clicado
        const targetId = this.getAttribute('href');
        // Seleciona o elemento de destino no DOM
        const targetElement = document.querySelector(targetId);

        // Verifica se o elemento de destino realmente existe na p치gina
        if (targetElement) {
            // Usa a API de scrollIntoView para um scroll suave at칠 o elemento
            targetElement.scrollIntoView({
                behavior: 'smooth', // Define a anima칞칚o como suave
                block: 'start'      // Alinha o topo do elemento com o topo da 치rea vis칤vel
            });
        }
    });
});


// ----- FUNCIONALIDADE DO MENU MOBILE -----
// Seleciona o bot칚o do menu mobile e a navega칞칚o
const btnMenuMobile = document.querySelector('.btn-menu-mobile');
// Assumindo que a navega칞칚o est치 dentro de um elemento com a classe 'navbar'
const navbarNav = document.querySelector('.navbar nav');

// Verifica se ambos os elementos foram encontrados para evitar erros
if (btnMenuMobile && navbarNav) {
    // Adiciona um listener para o clique no bot칚o do menu
    btnMenuMobile.addEventListener('click', () => {
        // Alterna a classe 'active' na navega칞칚o para mostrar/esconder o menu
        navbarNav.classList.toggle('active');
    });

    // Fecha o menu ao clicar em um link de navega칞칚o (melhora a experi칡ncia do usu치rio)
    // Seleciona todos os links dentro da navega칞칚o principal
    document.querySelectorAll('.navbar nav ul li a').forEach(link => {
        link.addEventListener('click', () => {
            // Remove a classe 'active' para fechar o menu ao clicar em um link
            navbarNav.classList.remove('active');
        });
    });
}


// ----- L칍GICA DO BOT츾O VOLTAR AO TOPO -----
// Seleciona o bot칚o "Voltar ao Topo" pelo seu ID
const btnVoltarAoTop = document.getElementById('btnVoltarAoTop');

// Verifica se o bot칚o existe na p치gina
if (btnVoltarAoTop) {
    // Adiciona um listener para o evento de scroll na janela
    // Utiliza addEventListener para uma melhor pr치tica, em vez de window.onscroll
    window.addEventListener('scroll', () => {
        // Define um ponto de scroll para exibir o bot칚o (ajust치vel)
        const scrollThreshold = 200; // Exibe o bot칚o ap칩s rolar 200 pixels

        // Verifica se a p치gina foi rolada mais do que o threshold
        // Usa document.documentElement.scrollTop para maior compatibilidade
        if (document.documentElement.scrollTop > scrollThreshold) {
            // Adiciona a classe 'show' para exibir o bot칚o (geralmente com CSS transition)
            btnVoltarAoTop.classList.add('show');
        } else {
            // Remove a classe 'show' para esconder o bot칚o
            btnVoltarAoTop.classList.remove('show');
        }
    });
    // Nota: O link no HTML j치 est치 configurado para ir para '#home' com scroll suave gra칞as ao script anterior.
}


// ----- L칍GICA DO FORMUL츼RIO DE CONTATO PARA WHATSAPP -----
// Seleciona o formul치rio de contato pelo seu ID
const formContato = document.getElementById('formContato');

// Verifica se o formul치rio existe na p치gina
if (formContato) {
    // Adiciona um listener para o evento de submit do formul치rio
    formContato.addEventListener('submit', function(e) {
        // Impede o envio padr칚o do formul치rio (que recarregaria a p치gina)
        e.preventDefault();

        // Captura os valores dos campos do formul치rio
        const nome = document.getElementById('nome').value;
        const telefone = document.getElementById('telefone').value;
        const produto = document.getElementById('produto').value; // Campo opcional
        const mensagem = document.getElementById('mensagem').value;

        // **IMPORTANTE:** Substitua '5549999999999' pelo seu n칰mero de WhatsApp real,
        // incluindo o c칩digo do pa칤s e DDD. Ex: '+5511987654321' ou '5511987654321'.
        const numeroWhatsApp = '554999840-6192'; // <-- LEMBRE-SE DE ATUALIZAR ESTE N칔MERO

        // Monta a mensagem que ser치 enviada para o WhatsApp
        let mensagemWhatsApp = `Ol치! 游녦\n\n`; // Sauda칞칚o inicial
        mensagemWhatsApp += `Nome: ${nome}\n`;
        mensagemWhatsApp += `Telefone: ${telefone}\n`;
        // Adiciona o produto apenas se ele foi preenchido
        if (produto) {
            mensagemWhatsApp += `Produto de Interesse: ${produto}\n`;
        }
        // Adiciona a mensagem do usu치rio, substituindo quebras de linha por '%0A' para codifica칞칚o correta na URL
        mensagemWhatsApp += `Mensagem:\n${mensagem.replace(/\n/g, '%0A')}\n\n`;

        // Cria o link para o WhatsApp, codificando a mensagem para garantir que caracteres especiais funcionem
        const linkWhatsApp = `https://wa.me/${numeroWhatsApp}?text=${encodeURIComponent(mensagemWhatsApp)}`;

        // Abre o link do WhatsApp em uma nova aba/janela
        window.open(linkWhatsApp, '_blank');
    });
}

/*
   NOTA SOBRE FILTRO DE CARD츼PIO:
   A funcionalidade de filtro de card치pio por categoria (bot칫es na p치gina de produtos)
   ainda n칚o foi implementada neste arquivo JavaScript. Se voc칡 desejar implementar
   o carregamento din칙mico ou filtragem de produtos, ser치 necess치rio adicionar um
   script espec칤fico para essa l칩gica, possivelmente lendo os dados dos produtos
   (seja de um array no pr칩prio JS ou de uma API) e manipulando a exibi칞칚o dos elementos
   na p치gina de produtos.
*/